// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class SoulMessenger {
    constructor() {
        this.currentUser = null;
        this.currentChat = null;
        this.chats = [];
        this.messages = [];
        this.allUsers = [];
        this.typingUsers = new Map();
        this.unreadMessages = new Map();
        this.settings = {
            theme: 'dark',
            fontSize: 'medium',
            notifications: true,
            sound: true
        };
        this.isMobile = window.innerWidth <= 768;
        this.newMessagesCount = 0;
        this.currentSearchQuery = '';
        this.currentUsersFilter = 'all';
        this.emojiAvatars = ['üòä', 'üòé', 'ü§©', 'üòç', 'ü§ó', 'üòá', 'ü•≥', 'üòã', 'ü§†', 'ü•∞', 'üòú', 'ü§™', 'üòå', 'ü§ì', 'ü•∏', 'üòè'];
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
        this.handleBeforeUnload = this.handleBeforeUnload.bind(this);
        this.handleResize = this.handleResize.bind(this);
        
        this.init();
    }
    
    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.initEventListeners();
        this.loadSettings();
        this.applySettings();
        this.detectMobile();
        this.initAvatarOptions();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth.onAuthStateChanged((user) => {
            if (user) {
                this.currentUser = user;
                this.showApp();
                this.loadUserData();
                this.loadChats();
                this.loadAllUsers();
                this.updateUserStatus('online');
            } else {
                this.showAuthScreen();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏/–±—Ä–∞—É–∑–µ—Ä–∞
        window.addEventListener('beforeunload', this.handleBeforeUnload);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', this.handleVisibilityChange);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', this.handleResize);
    }
    
    handleBeforeUnload() {
        if (this.currentUser) {
            this.updateUserStatus('offline');
        }
    }
    
    handleVisibilityChange() {
        if (this.currentUser) {
            if (document.hidden) {
                this.updateUserStatus('away');
            } else {
                this.updateUserStatus('online');
            }
        }
    }
    
    handleResize() {
        this.detectMobile();
        this.adjustLayout();
    }
    
    initEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞–º–∏ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        document.getElementById('show-register').addEventListener('click', () => {
            this.switchAuthForm('register');
        });
        
        document.getElementById('show-login').addEventListener('click', () => {
            this.switchAuthForm('login');
        });
        
        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        document.getElementById('login-btn').addEventListener('click', () => {
            this.login();
        });
        
        document.getElementById('register-btn').addEventListener('click', () => {
            this.register();
        });
        
        // –í—Ö–æ–¥ –ø–æ Enter
        document.getElementById('login-password').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.login();
        });
        
        document.getElementById('register-password').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.register();
        });
        
        // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        document.getElementById('logout-btn').addEventListener('click', () => {
            this.logout();
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        document.getElementById('settings-btn').addEventListener('click', () => {
            this.showSettingsModal();
        });
        
        document.getElementById('close-settings-modal').addEventListener('click', () => {
            this.hideSettingsModal();
        });
        
        document.getElementById('cancel-settings').addEventListener('click', () => {
            this.hideSettingsModal();
        });
        
        document.getElementById('save-settings').addEventListener('click', () => {
            this.saveSettings();
        });
        
        // –ü—Ä–æ—Ñ–∏–ª—å
        document.getElementById('user-avatar').addEventListener('click', () => {
            this.showProfileModal();
        });
        
        document.getElementById('user-name').addEventListener('click', () => {
            this.showProfileModal();
        });
        
        document.getElementById('close-profile-modal').addEventListener('click', () => {
            this.hideProfileModal();
        });
        
        document.getElementById('cancel-profile').addEventListener('click', () => {
            this.hideProfileModal();
        });
        
        document.getElementById('save-profile').addEventListener('click', () => {
            this.saveProfile();
        });
        
        document.getElementById('close-user-profile-modal').addEventListener('click', () => {
            this.hideUserProfileModal();
        });
        
        // –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        document.getElementById('mobile-menu-btn').addEventListener('click', () => {
            this.toggleSidebar();
        });
        
        document.getElementById('find-users-btn').addEventListener('click', () => {
            this.showUsersModal();
        });
        
        document.getElementById('back-to-chats').addEventListener('click', () => {
            this.hideChat();
        });
        
        // –ú–æ–±–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
        document.getElementById('mobile-new-chat').addEventListener('click', () => {
            this.showUsersModal();
        });
        
        document.getElementById('mobile-find-users').addEventListener('click', () => {
            this.showUsersModal();
        });
        
        document.getElementById('mobile-settings').addEventListener('click', () => {
            this.showSettingsModal();
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        document.getElementById('send-btn').addEventListener('click', () => {
            this.sendMessage();
        });
        
        const messageInput = document.getElementById('message-input');
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
        messageInput.addEventListener('input', () => {
            this.handleTyping();
            this.adjustTextareaHeight();
            this.updateCharCount();
        });
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        document.querySelectorAll('.btn-format').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.formatText(e.target.dataset.format);
            });
        });
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        document.getElementById('new-chat-btn').addEventListener('click', () => {
            this.showUsersModal();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.getElementById('close-users-modal').addEventListener('click', () => {
            this.hideUsersModal();
        });
        
        document.getElementById('cancel-users-btn').addEventListener('click', () => {
            this.hideUsersModal();
        });
        
        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersSearch = document.getElementById('users-search');
        usersSearch.addEventListener('input', (e) => {
            this.currentSearchQuery = e.target.value;
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                this.applyUsersFilter();
            }, 300);
        });
        
        usersSearch.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.applyUsersFilter();
            }
        });
        
        document.getElementById('search-users-btn').addEventListener('click', () => {
            this.applyUsersFilter();
        });
        
        // –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.setUsersFilter(e.target.dataset.filter);
            });
        });
        
        // –ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤
        const searchInput = document.getElementById('search-input');
        searchInput.addEventListener('input', (e) => {
            this.filterChats(e.target.value);
            this.toggleClearSearch(e.target.value.length > 0);
        });
        
        document.getElementById('clear-search').addEventListener('click', () => {
            searchInput.value = '';
            this.filterChats('');
            this.toggleClearSearch(false);
        });
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —á–∞—Ç–µ
        document.getElementById('voice-call-btn').addEventListener('click', () => {
            this.showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤—ã–∑–æ–≤', '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
        });
        
        document.getElementById('video-call-btn').addEventListener('click', () => {
            this.showNotification('–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫', '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
        });
        
        document.getElementById('chat-info-btn').addEventListener('click', () => {
            this.showChatInfo();
        });
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
        document.getElementById('scroll-to-bottom').addEventListener('click', () => {
            this.scrollToBottom();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        const messagesScroll = document.getElementById('messages-scroll');
        messagesScroll.addEventListener('scroll', () => {
            this.handleMessagesScroll();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
        document.addEventListener('click', (e) => {
            if (e.target.id === 'users-modal') this.hideUsersModal();
            if (e.target.id === 'settings-modal') this.hideSettingsModal();
            if (e.target.id === 'profile-modal') this.hideProfileModal();
            if (e.target.id === 'user-profile-modal') this.hideUserProfileModal();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∫–ª–∏–∫–µ
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('notification-close')) {
                e.target.closest('.notification').remove();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
        this.initTouchEvents();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫
    initAvatarOptions() {
        const avatarOptions = document.getElementById('avatar-options');
        avatarOptions.innerHTML = '';
        
        this.emojiAvatars.forEach(emoji => {
            const option = document.createElement('div');
            option.className = 'avatar-option';
            option.textContent = emoji;
            option.addEventListener('click', () => {
                this.selectAvatar(emoji);
            });
            avatarOptions.appendChild(option);
        });
    }
    
    selectAvatar(emoji) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –æ–ø—Ü–∏–π
        document.querySelectorAll('.avatar-option').forEach(opt => {
            opt.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
        event.target.classList.add('selected');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        document.getElementById('profile-avatar-preview').textContent = emoji;
    }
    
    // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async showProfileModal() {
        const userRef = database.ref('users/' + this.currentUser.uid);
        const snapshot = await userRef.once('value');
        const userData = snapshot.val();
        
        if (userData) {
            document.getElementById('profile-name').value = userData.name || '';
            document.getElementById('profile-username').value = userData.username || '';
            document.getElementById('profile-bio').value = userData.bio || '';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            const avatarPreview = document.getElementById('profile-avatar-preview');
            avatarPreview.textContent = userData.avatar || 'üòä';
            
            // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –æ–ø—Ü–∏—è—Ö
            document.querySelectorAll('.avatar-option').forEach(opt => {
                opt.classList.remove('selected');
                if (opt.textContent === (userData.avatar || 'üòä')) {
                    opt.classList.add('selected');
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            document.getElementById('profile-chats-count').textContent = this.chats.length;
            
            if (userData.createdAt) {
                const joinDate = new Date(userData.createdAt);
                document.getElementById('profile-joined-date').textContent = 
                    Math.floor((Date.now() - joinDate.getTime()) / (1000 * 60 * 60 * 24)) + ' –¥–Ω.';
            }
        }
        
        document.getElementById('profile-modal').classList.remove('hidden');
    }
    
    hideProfileModal() {
        document.getElementById('profile-modal').classList.add('hidden');
    }
    
    async saveProfile() {
        const name = document.getElementById('profile-name').value.trim();
        const username = document.getElementById('profile-username').value.trim();
        const bio = document.getElementById('profile-bio').value.trim();
        const selectedAvatar = document.querySelector('.avatar-option.selected');
        const avatar = selectedAvatar ? selectedAvatar.textContent : 'üòä';
        
        if (!name) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
            return;
        }
        
        if (!username) {
            this.showNotification('–û—à–∏–±–∫–∞', 'Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ username
        const usernameRegex = /^[a-zA-Z0-9_]+$/;
        if (!usernameRegex.test(username)) {
            this.showNotification('–û—à–∏–±–∫–∞', 'Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _', 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã bio
        if (bio.length > 150) {
            this.showNotification('–û—à–∏–±–∫–∞', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
            return;
        }
        
        try {
            await database.ref('users/' + this.currentUser.uid).update({
                name: name,
                username: username.toLowerCase(),
                bio: bio,
                avatar: avatar,
                updatedAt: new Date().toISOString()
            });
            
            this.hideProfileModal();
            this.showNotification('–ü—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
            this.loadUserData();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: ' + error.message, 'error');
        }
    }
    
    showUserProfile(userId) {
        const userRef = database.ref('users/' + userId);
        userRef.once('value').then(snapshot => {
            const userData = snapshot.val();
            if (userData) {
                const content = document.getElementById('user-profile-content');
                content.innerHTML = `
                    <div class="user-profile-avatar">${userData.avatar || 'üòä'}</div>
                    <div class="user-profile-name">${userData.name}</div>
                    <div class="user-profile-username">@${userData.username || 'user'}</div>
                    <div class="user-profile-status">
                        <div class="status-indicator ${userData.status}"></div>
                        <span>${this.getStatusText(userData.status)}</span>
                    </div>
                    ${userData.bio ? `<div class="user-profile-bio">${userData.bio}</div>` : ''}
                    <div class="user-profile-stats">
                        <div class="stat-item">
                            <span class="stat-number">${this.getUserChatsCount(userId)}</span>
                            <span class="stat-label">–æ–±—â–∏—Ö —á–∞—Ç–æ–≤</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">${this.formatJoinDate(userData.createdAt)}</span>
                            <span class="stat-label">—Å –Ω–∞–º–∏</span>
                        </div>
                    </div>
                `;
                
                document.getElementById('user-profile-modal').classList.remove('hidden');
            }
        });
    }
    
    hideUserProfileModal() {
        document.getElementById('user-profile-modal').classList.add('hidden');
    }
    
    getUserChatsCount(userId) {
        return this.chats.filter(chat => 
            chat.participants && chat.participants[userId]
        ).length;
    }
    
    formatJoinDate(createdAt) {
        if (!createdAt) return '-';
        const joinDate = new Date(createdAt);
        const days = Math.floor((Date.now() - joinDate.getTime()) / (1000 * 60 * 60 * 24));
        return days + ' –¥–Ω.';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    detectMobile() {
        this.isMobile = window.innerWidth <= 768;
        document.body.classList.toggle('mobile', this.isMobile);
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ layout
    adjustLayout() {
        if (this.isMobile && this.currentChat) {
            document.querySelector('.sidebar').classList.remove('active');
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    initTouchEvents() {
        let startX = 0;
        let currentX = 0;
        
        document.addEventListener('touchstart', (e) => {
            if (!this.isMobile) return;
            
            startX = e.touches[0].clientX;
        }, { passive: true });
        
        document.addEventListener('touchmove', (e) => {
            if (!this.isMobile) return;
            
            currentX = e.touches[0].clientX;
        }, { passive: true });
        
        document.addEventListener('touchend', () => {
            if (!this.isMobile) return;
            
            const diff = currentX - startX;
            const threshold = 50;
            
            if (Math.abs(diff) > threshold) {
                if (diff > 0 && this.currentChat) {
                    // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                    this.hideChat();
                }
            }
        }, { passive: true });
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    toggleSidebar() {
        const sidebar = document.querySelector('.sidebar');
        sidebar.classList.toggle('active');
        
        if (sidebar.classList.contains('active')) {
            document.body.classList.add('sidebar-open');
        } else {
            document.body.classList.remove('sidebar-open');
        }
    }
    
    hideChat() {
        this.currentChat = null;
        document.getElementById('chat-container').classList.add('hidden');
        document.getElementById('no-chat-selected').classList.remove('hidden');
        
        if (this.isMobile) {
            document.querySelector('.sidebar').classList.add('active');
            document.body.classList.add('sidebar-open');
        }
        
        this.renderChatsList();
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    applyUsersFilter() {
        const usersList = document.getElementById('users-list');
        const searchTerm = (this.currentSearchQuery || '').toLowerCase().trim();
        const filter = this.currentUsersFilter || 'all';
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
        let filteredUsers = this.allUsers;
        
        if (searchTerm) {
            filteredUsers = this.allUsers.filter(user => {
                const name = (user.name || '').toLowerCase();
                const username = (user.username || '').toLowerCase();
                
                // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –ò–õ–ò username
                return name.includes(searchTerm) || 
                       username.includes(searchTerm) ||
                       `@${username}`.includes(searchTerm);
            });
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        switch (filter) {
            case 'online':
                filteredUsers = filteredUsers.filter(user => user.status === 'online');
                break;
            case 'recent':
                filteredUsers = filteredUsers.filter(user => this.isRecentUser(user.id));
                break;
            case 'all':
            default:
                // –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                break;
        }
        
        this.renderFilteredUsersList(filteredUsers);
        this.updateSearchResultsInfo(filteredUsers.length);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if (filteredUsers.length === 0) {
            this.showNoResultsMessage(searchTerm);
        }
    }
    
    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    renderFilteredUsersList(users) {
        const usersList = document.getElementById('users-list');
        usersList.innerHTML = '';
        
        if (users.length === 0) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ showNoResultsMessage
            return;
        }
        
        users.forEach(user => {
            const userElement = document.createElement('div');
            userElement.className = 'user-item';
            userElement.dataset.userId = user.id;
            
            userElement.innerHTML = `
                <div class="user-item-avatar ${user.status}">${user.avatar || 'üòä'}</div>
                <div class="user-item-info">
                    <div class="user-item-name">${user.name}</div>
                    <div class="user-item-username">@${user.username || 'user'}</div>
                    <div class="user-item-status ${user.status}">${this.getStatusText(user.status)}</div>
                </div>
            `;
            
            userElement.addEventListener('click', () => {
                this.createChatWithUser(user);
            });
            
            // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
            userElement.addEventListener('dblclick', () => {
                this.showUserProfile(user.id);
            });
            
            usersList.appendChild(userElement);
        });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    showNoResultsMessage(searchTerm = '') {
        const usersList = document.getElementById('users-list');
        let message = '';
        
        if (searchTerm) {
            message = `
                <div class="no-results">
                    <div class="no-results-icon">üîç</div>
                    <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "<strong>${this.escapeHtml(searchTerm)}</strong>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                    <p class="hint">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä</p>
                </div>
            `;
        } else {
            message = `
                <div class="no-results">
                    <div class="no-results-icon">üë•</div>
                    <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    <p class="hint">–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ</p>
                </div>
            `;
        }
        
        usersList.innerHTML = message;
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
    
    setUsersFilter(filter) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-filter="${filter}"]`).classList.add('active');
        
        this.currentUsersFilter = filter;
        this.applyUsersFilter();
    }
    
    updateSearchResultsInfo(visibleCount = null) {
        const infoElement = document.getElementById('search-results-info');
        if (!infoElement) return;
        
        const totalCount = this.allUsers.length;
        const count = visibleCount !== null ? visibleCount : totalCount;
        const searchTerm = this.currentSearchQuery;
        
        let infoText = '';
        
        if (searchTerm) {
            if (count === 0) {
                infoText = '';
            } else {
                infoText = `–ù–∞–π–¥–µ–Ω–æ ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
            }
        } else {
            infoText = `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}`;
        }
        
        infoElement.textContent = infoText;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–∏–º
    isRecentUser(userId) {
        return this.chats.some(chat => 
            chat.participants && 
            chat.participants[userId] &&
            chat.lastMessageTime &&
            (Date.now() - new Date(chat.lastMessageTime).getTime()) < 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
        );
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    async createChatWithUser(user) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —á–∞—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const existingChat = this.chats.find(chat => 
            chat.type === 'private' && 
            chat.participants && 
            chat.participants[user.id]
        );
        
        if (existingChat) {
            this.selectChat(existingChat);
            this.hideUsersModal();
            this.showNotification('–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç', `–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å ${user.name}`, 'info');
            return;
        }
        
        try {
            // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
            const chatData = {
                type: 'private',
                name: user.name,
                participants: {
                    [this.currentUser.uid]: true,
                    [user.id]: true
                },
                createdAt: new Date().toISOString(),
                lastMessage: '–ß–∞—Ç —Å–æ–∑–¥–∞–Ω',
                lastMessageTime: new Date().toISOString()
            };
            
            const newChatRef = database.ref('chats').push();
            await newChatRef.set(chatData);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await database.ref('userChats/' + this.currentUser.uid + '/' + newChatRef.key).set(true);
            await database.ref('userChats/' + user.id + '/' + newChatRef.key).set(true);
            
            this.hideUsersModal();
            this.showNotification('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω', `–ù–∞—á–∞—Ç —á–∞—Ç —Å ${user.name}`, 'success');
            
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç', 'error');
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async loadAllUsers() {
        const usersRef = database.ref('users');
        usersRef.on('value', (snapshot) => {
            this.allUsers = [];
            const usersData = snapshot.val();
            
            if (usersData) {
                Object.keys(usersData).forEach(userId => {
                    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
                    if (userId !== this.currentUser.uid) {
                        this.allUsers.push({
                            id: userId,
                            ...usersData[userId]
                        });
                    }
                });
                
                console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.allUsers.length}`);
                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if (this.allUsers.length > 0) {
                    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', this.allUsers.map(u => ({ name: u.name, username: u.username })));
                }
                this.applyUsersFilter();
            } else {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                this.applyUsersFilter();
            }
        }, (error) => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            this.showNotification('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
        });
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loadUserData() {
        const userRef = database.ref('users/' + this.currentUser.uid);
        userRef.on('value', (snapshot) => {
            const userData = snapshot.val();
            if (userData) {
                document.getElementById('user-name').textContent = userData.name;
                document.getElementById('user-avatar').textContent = userData.avatar || 'üòä';
                document.getElementById('user-status').textContent = userData.status;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                const statusElement = document.getElementById('user-status');
                statusElement.className = `user-status status-${userData.status}`;
            }
        });
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserStatus(status) {
        if (!this.currentUser) return;
        
        try {
            await database.ref('users/' + this.currentUser.uid).update({
                status: status,
                lastSeen: new Date().toISOString()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    async loadChats() {
        const userChatsRef = database.ref('userChats/' + this.currentUser.uid);
        userChatsRef.on('value', (snapshot) => {
            this.chats = [];
            const chatsData = snapshot.val();
            
            if (chatsData) {
                Object.keys(chatsData).forEach(chatId => {
                    const chatRef = database.ref('chats/' + chatId);
                    chatRef.on('value', (chatSnapshot) => {
                        const chatData = chatSnapshot.val();
                        if (chatData) {
                            this.addChatToList(chatId, chatData);
                        }
                    });
                });
            }
            
            this.updateChatsCount();
        });
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
    addChatToList(chatId, chatData) {
        const existingChatIndex = this.chats.findIndex(chat => chat.id === chatId);
        
        if (existingChatIndex !== -1) {
            this.chats[existingChatIndex] = { id: chatId, ...chatData };
        } else {
            this.chats.push({ id: chatId, ...chatData });
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.chats.sort((a, b) => {
            const timeA = new Date(a.lastMessageTime || a.createdAt);
            const timeB = new Date(b.lastMessageTime || b.createdAt);
            return timeB - timeA;
        });
        
        this.renderChatsList();
        this.updateChatsCount();
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    renderChatsList() {
        const chatsList = document.getElementById('chats-list');
        chatsList.innerHTML = '';
        
        if (this.chats.length === 0) {
            chatsList.innerHTML = `
                <div class="no-chats">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤</p>
                    <p class="hint">–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</p>
                </div>
            `;
            return;
        }
        
        this.chats.forEach(chat => {
            const chatElement = document.createElement('div');
            chatElement.className = 'chat-item';
            if (this.currentChat && this.currentChat.id === chat.id) {
                chatElement.classList.add('active');
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ –∞–≤–∞—Ç–∞—Ä
            let chatName = chat.name || '–ß–∞—Ç';
            let lastMessage = chat.lastMessage || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
            let avatarText = this.getInitials(chatName);
            let unreadCount = this.unreadMessages.get(chat.id) || 0;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            let timeText = '';
            if (chat.lastMessageTime) {
                const messageTime = new Date(chat.lastMessageTime);
                timeText = this.formatMessageTime(messageTime);
            }
            
            // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –∞–≤–∞—Ç–∞—Ä
            if (chat.type === 'private') {
                const participantIds = Object.keys(chat.participants || {});
                const otherParticipantId = participantIds.find(id => id !== this.currentUser.uid);
                
                if (otherParticipantId) {
                    // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    const otherUser = this.allUsers.find(user => user.id === otherParticipantId);
                    if (otherUser) {
                        chatName = otherUser.name;
                        avatarText = otherUser.avatar || this.getInitials(otherUser.name);
                    }
                }
            }
            
            chatElement.innerHTML = `
                <div class="chat-item-avatar">
                    ${avatarText}
                    ${unreadCount > 0 ? `<div class="chat-item-unread">${unreadCount}</div>` : ''}
                </div>
                <div class="chat-item-info">
                    <div class="chat-item-name">${chatName}</div>
                    <div class="chat-item-last-message">${lastMessage}</div>
                    ${timeText ? `<div class="chat-item-time">${timeText}</div>` : ''}
                </div>
            `;
            
            chatElement.addEventListener('click', () => {
                this.selectChat({ id: chat.id, ...chat, name: chatName });
                this.markChatAsRead(chat.id);
            });
            
            chatsList.appendChild(chatElement);
        });
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤
    filterChats(query) {
        const chats = document.querySelectorAll('.chat-item');
        const searchTerm = query.toLowerCase();
        
        chats.forEach(chat => {
            const name = chat.querySelector('.chat-item-name').textContent.toLowerCase();
            const lastMessage = chat.querySelector('.chat-item-last-message').textContent.toLowerCase();
            
            if (name.includes(searchTerm) || lastMessage.includes(searchTerm)) {
                chat.style.display = 'flex';
            } else {
                chat.style.display = 'none';
            }
        });
    }
    
    // –í—ã–±–æ—Ä —á–∞—Ç–∞
    selectChat(chat) {
        this.currentChat = chat;
        this.renderChatsList();
        this.showChat();
        this.loadMessages(chat.id);
        this.setupTypingListener(chat.id);
        this.markChatAsRead(chat.id);
        this.newMessagesCount = 0;
        this.updateScrollIndicator();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        document.getElementById('chat-title').textContent = chat.name;
        document.getElementById('chat-avatar').textContent = this.getInitials(chat.name);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        if (chat.type === 'private') {
            const participantIds = Object.keys(chat.participants || {});
            const otherParticipantId = participantIds.find(id => id !== this.currentUser.uid);
            
            if (otherParticipantId) {
                const userRef = database.ref('users/' + otherParticipantId);
                userRef.on('value', (snapshot) => {
                    const userData = snapshot.val();
                    if (userData) {
                        const status = this.getStatusText(userData.status);
                        document.getElementById('chat-status').textContent = status;
                    }
                });
            }
        } else {
            document.getElementById('chat-status').textContent = '–≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç';
        }
        
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∫—Ä—ã–≤–∞–µ–º sidebar –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
        if (this.isMobile) {
            document.querySelector('.sidebar').classList.remove('active');
            document.body.classList.remove('sidebar-open');
        }
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        setTimeout(() => {
            document.getElementById('message-input').focus();
        }, 300);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    loadMessages(chatId) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.messages = [];
        const messagesScroll = document.getElementById('messages-scroll');
        messagesScroll.innerHTML = '';
        
        const messagesRef = database.ref('messages/' + chatId);
        messagesRef.orderByChild('timestamp').on('child_added', (snapshot) => {
            const message = { id: snapshot.key, ...snapshot.val() };
            this.messages.push(message);
            this.renderMessage(message);
            
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–Ω–∏–∑—É
            if (this.isNearBottom()) {
                setTimeout(() => this.scrollToBottom(), 100);
            }
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if (message.senderId !== this.currentUser.uid && !this.isChatActive(chatId)) {
                this.handleNewMessage(message, chatId);
            }
        });
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    renderMessage(message) {
        const messagesScroll = document.getElementById('messages-scroll');
        const messageElement = document.createElement('div');
        
        const isSentByMe = message.senderId === this.currentUser.uid;
        messageElement.className = `message ${isSentByMe ? 'sent' : 'received'}`;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        const messageTime = new Date(message.timestamp);
        const timeString = messageTime.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        let senderName = '–í—ã';
        let senderAvatar = '';
        if (!isSentByMe) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            const userRef = database.ref('users/' + message.senderId);
            userRef.once('value').then(snapshot => {
                const userData = snapshot.val();
                if (userData) {
                    senderName = userData.name;
                    senderAvatar = userData.avatar || this.getInitials(userData.name);
                    
                    const senderElement = messageElement.querySelector('.message-sender');
                    if (senderElement) {
                        senderElement.innerHTML = `
                            <span class="sender-avatar">${senderAvatar}</span>
                            ${senderName}
                        `;
                    }
                }
            });
        }
        
        messageElement.innerHTML = `
            ${!isSentByMe ? `<div class="message-sender"></div>` : ''}
            <div class="message-text">${this.formatMessageText(message.text)}</div>
            <div class="message-time">${timeString}</div>
        `;
        
        messagesScroll.appendChild(messageElement);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    formatMessageText(text) {
        // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown-like
        return text
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>');
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    setupTypingListener(chatId) {
        const typingRef = database.ref('typing/' + chatId);
        typingRef.on('value', (snapshot) => {
            const typingData = snapshot.val();
            this.updateTypingIndicator(typingData);
        });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    updateTypingIndicator(typingData) {
        const indicator = document.getElementById('typing-indicator');
        
        if (!typingData) {
            indicator.innerHTML = '';
            return;
        }
        
        const typingUsers = Object.keys(typingData)
            .filter(userId => userId !== this.currentUser.uid && typingData[userId])
            .map(userId => {
                const user = this.allUsers.find(u => u.id === userId);
                return user ? user.name : '–ö—Ç–æ-—Ç–æ';
            });
        
        if (typingUsers.length > 0) {
            const names = typingUsers.join(', ');
            const verb = typingUsers.length === 1 ? '–ø–µ—á–∞—Ç–∞–µ—Ç' : '–ø–µ—á–∞—Ç–∞—é—Ç';
            indicator.innerHTML = `
                <span>${names} ${verb}</span>
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            `;
        } else {
            indicator.innerHTML = '';
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    handleTyping() {
        if (!this.currentChat) return;
        
        const chatId = this.currentChat.id;
        const typingRef = database.ref('typing/' + chatId + '/' + this.currentUser.uid);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä–∞
        typingRef.set(true);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        clearTimeout(this.typingTimeout);
        this.typingTimeout = setTimeout(() => {
            typingRef.set(false);
        }, 2000);
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    async sendMessage() {
        const messageInput = document.getElementById('message-input');
        const messageText = messageInput.value.trim();
        
        if (!messageText || !this.currentChat) {
            return;
        }
        
        if (messageText.length > 1000) {
            this.showNotification('–û—à–∏–±–∫–∞', '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ', 'error');
            return;
        }
        
        const message = {
            text: messageText,
            senderId: this.currentUser.uid,
            timestamp: new Date().toISOString()
        };
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const messagesRef = database.ref('messages/' + this.currentChat.id);
            await messagesRef.push(message);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
            const chatRef = database.ref('chats/' + this.currentChat.id);
            await chatRef.update({
                lastMessage: messageText.length > 50 ? messageText.substring(0, 47) + '...' : messageText,
                lastMessageTime: message.timestamp
            });
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            const typingRef = database.ref('typing/' + this.currentChat.id + '/' + this.currentUser.uid);
            await typingRef.set(false);
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            messageInput.value = '';
            this.adjustTextareaHeight();
            this.updateCharCount();
            
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    formatText(format) {
        const messageInput = document.getElementById('message-input');
        const start = messageInput.selectionStart;
        const end = messageInput.selectionEnd;
        const selectedText = messageInput.value.substring(start, end);
        
        let formattedText = '';
        const symbols = {
            bold: '**',
            italic: '*',
            code: '`'
        };
        
        if (selectedText) {
            formattedText = symbols[format] + selectedText + symbols[format];
            messageInput.setRangeText(formattedText, start, end, 'select');
        } else {
            formattedText = symbols[format] + symbols[format];
            messageInput.setRangeText(formattedText, start, end, 'end');
            messageInput.selectionStart = messageInput.selectionEnd - symbols[format].length;
        }
        
        messageInput.focus();
        this.updateCharCount();
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    loadSettings() {
        const savedSettings = localStorage.getItem('soul-settings');
        if (savedSettings) {
            this.settings = { ...this.settings, ...JSON.parse(savedSettings) };
        }
    }
    
    saveSettings() {
        this.settings.theme = document.getElementById('theme-select').value;
        this.settings.fontSize = document.getElementById('font-size-select').value;
        this.settings.notifications = document.getElementById('notifications-enabled').checked;
        this.settings.sound = document.getElementById('sound-enabled').checked;
        
        localStorage.setItem('soul-settings', JSON.stringify(this.settings));
        this.applySettings();
        this.hideSettingsModal();
        this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    }
    
    applySettings() {
        // –¢–µ–º–∞
        let theme = this.settings.theme;
        if (theme === 'auto') {
            theme = window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
        }
        document.body.setAttribute('data-theme', theme);
        document.body.setAttribute('data-font-size', this.settings.fontSize);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('theme-select').value = this.settings.theme;
        document.getElementById('font-size-select').value = this.settings.fontSize;
        document.getElementById('notifications-enabled').checked = this.settings.notifications;
        document.getElementById('sound-enabled').checked = this.settings.sound;
    }
    
    showSettingsModal() {
        document.getElementById('settings-modal').classList.remove('hidden');
    }
    
    hideSettingsModal() {
        document.getElementById('settings-modal').classList.add('hidden');
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
    showChatInfo() {
        if (!this.currentChat) return;
        
        let info = `–¢–∏–ø: ${this.currentChat.type === 'private' ? '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç' : '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç'}\n`;
        info += `–°–æ–∑–¥–∞–Ω: ${new Date(this.currentChat.createdAt).toLocaleDateString('ru-RU')}`;
        
        this.showNotification('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ', info, 'info');
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    getInitials(name) {
        return name.split(' ').map(word => word[0]).join('').toUpperCase().substring(0, 2);
    }
    
    getStatusText(status) {
        const statusMap = {
            online: '–≤ —Å–µ—Ç–∏',
            away: '–æ—Ç–æ—à–µ–ª',
            offline: '–Ω–µ –≤ —Å–µ—Ç–∏'
        };
        return statusMap[status] || status;
    }
    
    formatMessageTime(date) {
        const now = new Date();
        const diff = now - date;
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        
        if (days === 0) {
            return date.toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        } else if (days === 1) {
            return '–í—á–µ—Ä–∞';
        } else if (days < 7) {
            return date.toLocaleDateString('ru-RU', { weekday: 'short' });
        } else {
            return date.toLocaleDateString('ru-RU');
        }
    }
    
    setButtonLoading(button, isLoading) {
        const btnText = button.querySelector('.btn-text');
        const btnLoader = button.querySelector('.btn-loader');
        
        if (isLoading) {
            btnText.classList.add('hidden');
            btnLoader.classList.remove('hidden');
            button.disabled = true;
        } else {
            btnText.classList.remove('hidden');
            btnLoader.classList.add('hidden');
            button.disabled = false;
        }
    }
    
    adjustTextareaHeight() {
        const textarea = document.getElementById('message-input');
        textarea.style.height = 'auto';
        textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
    }
    
    updateCharCount() {
        const textarea = document.getElementById('message-input');
        const count = textarea.value.length;
        const counter = document.getElementById('char-count');
        counter.textContent = `${count}/1000`;
        
        if (count > 900) {
            counter.style.color = 'var(--warning-color)';
        } else if (count > 1000) {
            counter.style.color = 'var(--error-color)';
        } else {
            counter.style.color = 'var(--text-muted)';
        }
    }
    
    toggleClearSearch(show) {
        const clearBtn = document.getElementById('clear-search');
        if (show) {
            clearBtn.classList.remove('hidden');
        } else {
            clearBtn.classList.add('hidden');
        }
    }
    
    switchAuthForm(form) {
        if (form === 'register') {
            document.getElementById('login-form').classList.add('hidden');
            document.getElementById('register-form').classList.remove('hidden');
        } else {
            document.getElementById('register-form').classList.add('hidden');
            document.getElementById('login-form').classList.remove('hidden');
        }
    }
    
    updateChatsCount() {
        document.getElementById('chats-count').textContent = this.chats.length;
    }
    
    scrollToBottom() {
        const messagesScroll = document.getElementById('messages-scroll');
        messagesScroll.scrollTop = messagesScroll.scrollHeight;
        this.hideScrollIndicator();
        this.newMessagesCount = 0;
        this.updateScrollIndicator();
    }
    
    handleMessagesScroll() {
        const messagesScroll = document.getElementById('messages-scroll');
        const scrollIndicator = document.getElementById('scroll-indicator');
        
        const isNearBottom = this.isNearBottom();
        if (isNearBottom) {
            this.hideScrollIndicator();
            this.newMessagesCount = 0;
            this.updateScrollIndicator();
        } else {
            this.showScrollIndicator();
        }
    }
    
    isNearBottom() {
        const messagesScroll = document.getElementById('messages-scroll');
        const threshold = 100;
        return messagesScroll.scrollHeight - messagesScroll.scrollTop - messagesScroll.clientHeight < threshold;
    }
    
    showScrollIndicator() {
        document.getElementById('scroll-indicator').classList.remove('hidden');
    }
    
    hideScrollIndicator() {
        document.getElementById('scroll-indicator').classList.add('hidden');
    }
    
    updateScrollIndicator() {
        const countElement = document.querySelector('.new-messages-count');
        if (countElement) {
            if (this.newMessagesCount > 0) {
                countElement.textContent = this.newMessagesCount > 99 ? '99+' : this.newMessagesCount;
                countElement.style.display = 'flex';
            } else {
                countElement.style.display = 'none';
            }
        }
    }
    
    isChatActive(chatId) {
        return this.currentChat && this.currentChat.id === chatId;
    }
    
    handleNewMessage(message, chatId) {
        if (!this.settings.notifications) return;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        const currentCount = this.unreadMessages.get(chatId) || 0;
        this.unreadMessages.set(chatId, currentCount + 1);
        this.renderChatsList();
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        if (this.isChatActive(chatId) && !this.isNearBottom()) {
            this.newMessagesCount++;
            this.updateScrollIndicator();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const sender = this.allUsers.find(user => user.id === message.senderId);
        if (sender) {
            this.showNotification(sender.name, message.text, 'info');
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            if (this.settings.sound) {
                this.playNotificationSound();
            }
        }
    }
    
    markChatAsRead(chatId) {
        this.unreadMessages.set(chatId, 0);
        this.renderChatsList();
    }
    
    playNotificationSound() {
        const sound = document.getElementById('notification-sound');
        sound.currentTime = 0;
        sound.play().catch(e => console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', e));
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–æ–≤
    showAuthScreen() {
        document.getElementById('loading-screen').classList.add('hidden');
        document.getElementById('auth-screen').classList.remove('hidden');
        document.getElementById('app').classList.add('hidden');
    }
    
    showApp() {
        document.getElementById('loading-screen').classList.add('hidden');
        document.getElementById('auth-screen').classList.add('hidden');
        document.getElementById('app').classList.remove('hidden');
    }
    
    showChat() {
        document.getElementById('no-chat-selected').classList.add('hidden');
        document.getElementById('chat-container').classList.remove('hidden');
    }
    
    showUsersModal() {
        document.getElementById('users-modal').classList.remove('hidden');
        document.getElementById('users-search').value = '';
        document.getElementById('users-search').focus();
        this.currentSearchQuery = '';
        this.currentUsersFilter = 'all';
        this.applyUsersFilter();
    }
    
    hideUsersModal() {
        document.getElementById('users-modal').classList.add('hidden');
    }
    
    // –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(title, message, type = 'info') {
        if (!this.settings.notifications) return;
        
        const notifications = document.getElementById('notifications');
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        
        const icons = {
            info: 'üí´',
            success: '‚úÖ',
            warning: '‚ö†Ô∏è',
            error: '‚ùå'
        };
        
        notification.innerHTML = `
            <div class="notification-icon">${icons[type]}</div>
            <div class="notification-content">
                <div class="notification-title">${title}</div>
                <div class="notification-message">${message}</div>
            </div>
            <button class="notification-close">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
        `;
        
        notifications.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }
        }, 5000);
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    debugUsers() {
        console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.currentUser ? this.currentUser.uid : '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        console.log('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', this.allUsers);
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', this.allUsers.length);
        
        if (this.allUsers.length > 0) {
            console.log('–ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', this.allUsers.map(u => u.name));
            console.log('Usernames:', this.allUsers.map(u => u.username));
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.soulApp = new SoulMessenger();
});