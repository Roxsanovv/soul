// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentChat = null;
let users = {};
let chats = {};
let messages = {};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è WebRTC
let localStream = null;
let remoteStream = null;
let peerConnection = null;
let isCaller = false;
let isInitiator = false;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è STUN —Å–µ—Ä–≤–µ—Ä–æ–≤
const pcConfig = {
    iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' }
    ]
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const authScreen = document.getElementById('auth-screen');
const mainScreen = document.getElementById('main-screen');
const loginForm = document.getElementById('login-form');
const registerForm = document.getElementById('register-form');
const showRegisterLink = document.getElementById('show-register');
const showLoginLink = document.getElementById('show-login');
const loginBtn = document.getElementById('login-btn');
const registerBtn = document.getElementById('register-btn');
const loginEmail = document.getElementById('login-email');
const loginPassword = document.getElementById('login-password');
const registerName = document.getElementById('register-name');
const registerEmail = document.getElementById('register-email');
const registerPassword = document.getElementById('register-password');
const userName = document.getElementById('user-name');
const userAvatar = document.getElementById('user-avatar');
const chatsList = document.getElementById('chats-list');
const messagesContainer = document.getElementById('messages-container');
const messageInput = document.getElementById('message-input');
const sendBtn = document.getElementById('send-btn');
const messageInputContainer = document.getElementById('message-input-container');
const newChatBtn = document.getElementById('new-chat-btn');
const settingsBtn = document.getElementById('settings-btn');
const newChatModal = document.getElementById('new-chat-modal');
const closeNewChatModal = document.getElementById('close-new-chat-modal');
const searchUserInput = document.getElementById('search-user-input');
const usersList = document.getElementById('users-list');
const settingsModal = document.getElementById('settings-modal');
const closeSettingsModal = document.getElementById('close-settings-modal');
const settingsAvatar = document.getElementById('settings-avatar');
const settingsName = document.getElementById('settings-name');
const saveProfileBtn = document.getElementById('save-profile-btn');
const logoutBtn = document.getElementById('logout-btn');
const themeOptions = document.querySelectorAll('input[name="theme"]');
const chatActions = document.getElementById('chat-actions');
const voiceCallBtn = document.getElementById('voice-call-btn');
const videoCallBtn = document.getElementById('video-call-btn');
const chatInfoBtn = document.getElementById('chat-info-btn');
const callModal = document.getElementById('call-modal');
const endCallBtn = document.getElementById('end-call-btn');
const muteCallBtn = document.getElementById('mute-call-btn');
const callTitle = document.getElementById('call-title');
const callAvatar = document.getElementById('call-avatar');
const callStatus = document.getElementById('call-status');
const callTimerElement = document.getElementById('call-timer');
const callerName = document.getElementById('caller-name');
const colorOptions = document.querySelectorAll('.color-option');
const chatInfoModal = document.getElementById('chat-info-modal');
const closeChatInfoModal = document.getElementById('close-chat-info-modal');
const chatInfoContent = document.getElementById('chat-info-content');
const createGroupChatBtn = document.getElementById('create-group-chat-btn');

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ –∑–≤–æ–Ω–∫–æ–≤
const localVideo = document.createElement('video');
const remoteVideo = document.createElement('video');
localVideo.autoplay = true;
localVideo.muted = true;
localVideo.playsInline = true;
remoteVideo.autoplay = true;
remoteVideo.playsInline = true;

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫
function generateAvatarColor(userId) {
    const colors = [
        '#8a4fff', '#2196f3', '#e91e63', '#4caf50', 
        '#ff9800', '#9c27b0', '#00bcd4', '#ff5722'
    ];
    const index = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) % colors.length;
    return colors[index];
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏
function createAvatar(name, color) {
    const canvas = document.createElement('canvas');
    canvas.width = 200;
    canvas.height = 200;
    const ctx = canvas.getContext('2d');
    
    // –§–æ–Ω
    ctx.fillStyle = color;
    ctx.fillRect(0, 0, 200, 200);
    
    // –¢–µ–∫—Å—Ç
    ctx.fillStyle = 'white';
    ctx.font = 'bold 80px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    const initials = name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
    ctx.fillText(initials, 100, 100);
    
    return canvas.toDataURL();
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info', duration = 4000) {
    const container = document.getElementById('notifications-container');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    const icon = type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : type === 'warning' ? '‚ö†Ô∏è' : 'üíú';
    
    notification.innerHTML = `
        <div class="notification-content">
            <div class="notification-message">${icon} ${message}</div>
        </div>
        <button class="notification-close">&times;</button>
    `;
    
    container.appendChild(notification);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', () => {
        notification.classList.add('hiding');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        if (notification.parentNode) {
            notification.classList.add('hiding');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }
    }, duration);
    
    return notification;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
function formatLastSeen(timestamp) {
    if (!timestamp) return '–¥–∞–≤–Ω–æ';
    
    const now = Date.now();
    const diff = now - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
    return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function formatMessageTime(timestamp) {
    const now = new Date();
    const messageDate = new Date(timestamp);
    
    if (now.toDateString() === messageDate.toDateString()) {
        return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else {
        return messageDate.toLocaleDateString([], { day: '2-digit', month: '2-digit' });
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —á–∞—Ç–∞
function generateChatId(userId1, userId2) {
    return [userId1, userId2].sort().join('_');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
function setButtonLoading(button, isLoading) {
    if (isLoading) {
        button.classList.add('loading');
        button.disabled = true;
    } else {
        button.classList.remove('loading');
        button.disabled = false;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
function formatCallDuration(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

// ==================== WEBRTC –§–£–ù–ö–¶–ò–ò ====================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC
async function initializeWebRTC() {
    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        localStream = await navigator.mediaDevices.getUserMedia({ 
            video: false, 
            audio: true 
        });
        console.log("Local stream obtained");
    } catch (error) {
        console.error("Error accessing media devices:", error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É', 'error');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ Peer Connection
function createPeerConnection() {
    try {
        peerConnection = new RTCPeerConnection(pcConfig);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        if (localStream) {
            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        peerConnection.ontrack = (event) => {
            console.log("Remote track received");
            remoteStream = event.streams[0];
            remoteVideo.srcObject = remoteStream;
        };
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                sendSignalingMessage({
                    type: 'ice-candidate',
                    candidate: event.candidate,
                    chatId: currentChat.id,
                    to: getOtherUserId()
                });
            }
        };
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        peerConnection.onconnectionstatechange = () => {
            console.log("Connection state:", peerConnection.connectionState);
            updateCallStatus(peerConnection.connectionState);
        };
        
        return peerConnection;
    } catch (error) {
        console.error("Error creating peer connection:", error);
        return null;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendSignalingMessage(message) {
    if (!currentChat) return;
    
    const messageId = database.ref('signaling/' + currentChat.id).push().key;
    database.ref('signaling/' + currentChat.id + '/' + messageId).set({
        ...message,
        from: currentUser.uid,
        timestamp: Date.now()
    });
}

// –°–ª—É—à–∞—Ç–µ–ª—å —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function setupSignalingListener() {
    if (!currentChat) return;
    
    database.ref('signaling/' + currentChat.id).on('child_added', async (snapshot) => {
        const message = snapshot.val();
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (message.from === currentUser.uid) return;
        
        console.log("Signaling message received:", message.type);
        
        switch (message.type) {
            case 'offer':
                await handleOffer(message.offer);
                break;
            case 'answer':
                await handleAnswer(message.answer);
                break;
            case 'ice-candidate':
                await handleIceCandidate(message.candidate);
                break;
            case 'call-request':
                handleCallRequest(message);
                break;
            case 'call-accepted':
                handleCallAccepted();
                break;
            case 'call-rejected':
                handleCallRejected();
                break;
            case 'call-ended':
                handleCallEnded();
                break;
        }
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        snapshot.ref.remove();
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
async function handleOffer(offer) {
    if (!peerConnection) {
        await createPeerConnection();
    }
    
    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    
    sendSignalingMessage({
        type: 'answer',
        answer: answer,
        chatId: currentChat.id,
        to: getOtherUserId()
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
async function handleAnswer(answer) {
    if (peerConnection) {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
async function handleIceCandidate(candidate) {
    if (peerConnection && peerConnection.remoteDescription) {
        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getOtherUserId() {
    if (!currentChat) return null;
    return currentChat.participants.find(id => id !== currentUser.uid);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
function updateCallStatus(state) {
    const statusMap = {
        'new': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...',
        'connecting': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...',
        'connected': '–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω',
        'disconnected': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ',
        'failed': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
        'closed': '–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω'
    };
    
    callStatus.textContent = statusMap[state] || state;
    
    if (state === 'connected') {
        startCallTimer();
        showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    } else if (state === 'failed' || state === 'disconnected') {
        showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ', 'error');
        endCall();
    }
}

// ==================== –§–£–ù–ö–¶–ò–ò –ó–í–û–ù–ö–û–í ====================

// –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞
async function startCall(isVideo = false) {
    if (!currentChat) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞', 'error');
        return;
    }
    
    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const constraints = {
            audio: true,
            video: isVideo
        };
        
        localStream = await navigator.mediaDevices.getUserMedia(constraints);
        
        // –°–æ–∑–¥–∞–µ–º Peer Connection
        peerConnection = createPeerConnection();
        if (!peerConnection) {
            throw new Error('Failed to create peer connection');
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫
        sendSignalingMessage({
            type: 'call-request',
            offer: offer,
            isVideo: isVideo,
            chatId: currentChat.id,
            to: getOtherUserId()
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
        showCallInterface(isVideo);
        isInitiator = true;
        
        showNotification('–í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'info');
        
    } catch (error) {
        console.error("Error starting call:", error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫: ' + error.message, 'error');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
function showCallInterface(isVideo) {
    const otherUserId = getOtherUserId();
    const otherUser = users[otherUserId];
    
    if (otherUser) {
        callTitle.textContent = isVideo ? '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫';
        callAvatar.src = otherUser.avatar;
        callerName.textContent = otherUser.name;
        callStatus.textContent = '–í—ã–∑–æ–≤...';
        callTimerElement.textContent = '00:00';
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (isVideo && localStream) {
            localVideo.srcObject = localStream;
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å localVideo –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        }
    }
    
    callModal.classList.add('active');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
function handleCallRequest(message) {
    const otherUserId = getOtherUserId();
    const otherUser = users[otherUserId];
    
    if (!otherUser) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
    showNotification(`–í—Ö–æ–¥—è—â–∏–π ${message.isVideo ? '–≤–∏–¥–µ–æ' : '–≥–æ–ª–æ—Å–æ–≤–æ–π'} –∑–≤–æ–Ω–æ–∫ –æ—Ç ${otherUser.name}`, 'info');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    setTimeout(() => {
        acceptCall(message);
    }, 2000);
}

// –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞
async function acceptCall(message) {
    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const constraints = {
            audio: true,
            video: message.isVideo
        };
        
        localStream = await navigator.mediaDevices.getUserMedia(constraints);
        
        // –°–æ–∑–¥–∞–µ–º Peer Connection
        peerConnection = createPeerConnection();
        if (!peerConnection) {
            throw new Error('Failed to create peer connection');
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        await peerConnection.setRemoteDescription(new RTCSessionDescription(message.offer));
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        sendSignalingMessage({
            type: 'answer',
            answer: answer,
            chatId: currentChat.id,
            to: getOtherUserId()
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
        showCallInterface(message.isVideo);
        isInitiator = false;
        
        showNotification('–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç', 'success');
        
    } catch (error) {
        console.error("Error accepting call:", error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫', 'error');
        rejectCall();
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
function endCall() {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
    sendSignalingMessage({
        type: 'call-ended',
        chatId: currentChat.id,
        to: getOtherUserId()
    });
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localStream = null;
    }
    
    if (remoteStream) {
        remoteStream.getTracks().forEach(track => track.stop());
        remoteStream = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º Peer Connection
    if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (callDurationTimer) {
        clearInterval(callDurationTimer);
        callDurationTimer = null;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
    callModal.classList.remove('active');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if (callStartTime) {
        const duration = Math.floor((Date.now() - callStartTime) / 1000);
        createCallMessage(isVideoCall, callStartTime, duration);
        callStartTime = null;
    }
    
    isInitiator = false;
    isVideoCall = false;
    
    showNotification('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
}

// –¢–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
let callDurationTimer = null;
let callStartTime = null;
let isVideoCall = false;

function startCallTimer() {
    callStartTime = Date.now();
    callDurationTimer = setInterval(() => {
        const elapsed = Math.floor((Date.now() - callStartTime) / 1000);
        callTimerElement.textContent = formatCallDuration(elapsed);
    }, 1000);
}

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
function rejectCall() {
    sendSignalingMessage({
        type: 'call-rejected',
        chatId: currentChat.id,
        to: getOtherUserId()
    });
    
    showNotification('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'info');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–≤–æ–Ω–∫–∞
function handleCallAccepted() {
    callStatus.textContent = '–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç';
    startCallTimer();
}

function handleCallRejected() {
    showNotification('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'error');
    endCall();
}

function handleCallEnded() {
    showNotification('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –∑–≤–æ–Ω–æ–∫', 'info');
    endCall();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
function toggleMute() {
    if (localStream) {
        const audioTracks = localStream.getAudioTracks();
        audioTracks.forEach(track => {
            track.enabled = !track.enabled;
        });
        const isMuted = !audioTracks[0].enabled;
        muteCallBtn.classList.toggle('active', isMuted);
        showNotification(isMuted ? '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω' : '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω', 'info');
    }
}

// ==================== –§–£–ù–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====================

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    console.log("Loading user data for:", currentUser.uid);
    
    database.ref('users/' + currentUser.uid).once('value')
        .then((snapshot) => {
            const userData = snapshot.val();
            if (userData) {
                console.log("User data found:", userData);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                userName.textContent = userData.name;
                userAvatar.src = userData.avatar;
                settingsName.value = userData.name;
                settingsAvatar.src = userData.avatar;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞
                colorOptions.forEach(option => {
                    if (option.dataset.color === (userData.avatarColor || '#8a4fff')) {
                        option.classList.add('active');
                    }
                });
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
                authScreen.classList.remove('active');
                mainScreen.classList.add('active');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                updateUserStatus('online');
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebRTC
                initializeWebRTC();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç—ã
                loadUsers();
                loadChats();
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                setupRealtimeListeners();
                
            } else {
                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö
                createUserData();
            }
        })
        .catch((error) => {
            console.error("Error loading user data:", error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
function createUserData() {
    const userName = currentUser.displayName || currentUser.email.split('@')[0];
    const avatarColor = generateAvatarColor(currentUser.uid);
    const avatar = createAvatar(userName, avatarColor);
    
    const userData = {
        name: userName,
        email: currentUser.email,
        avatar: avatar,
        avatarColor: avatarColor,
        status: 'online',
        lastSeen: firebase.database.ServerValue.TIMESTAMP,
        createdAt: firebase.database.ServerValue.TIMESTAMP
    };
    
    database.ref('users/' + currentUser.uid).set(userData)
        .then(() => {
            console.log("User data created successfully");
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            loadUserData();
        })
        .catch((error) => {
            console.error("Error creating user data:", error);
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', 'error');
        });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserStatus(status) {
    const updates = {
        status: status,
        lastSeen: firebase.database.ServerValue.TIMESTAMP
    };
    
    database.ref('users/' + currentUser.uid).update(updates)
        .then(() => {
            console.log("User status updated to:", status);
        })
        .catch((error) => {
            console.error("Error updating user status:", error);
        });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadUsers() {
    database.ref('users').once('value')
        .then((snapshot) => {
            const usersData = snapshot.val() || {};
            users = usersData;
            console.log("Loaded users:", Object.keys(users).length, users);
            renderUsersList();
        })
        .catch((error) => {
            console.error("Error loading users:", error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
        });
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function refreshUsersList() {
    console.log("Refreshing users list...");
    loadUsers();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function renderUsersList(filter = '') {
    usersList.innerHTML = '';
    
    const filteredUsers = Object.keys(users).filter(userId => {
        if (userId === currentUser.uid) return false;
        const user = users[userId];
        if (!user || !user.name) return false;
        
        if (filter) {
            return user.name.toLowerCase().includes(filter.toLowerCase()) || 
                   user.email.toLowerCase().includes(filter.toLowerCase());
        }
        return true;
    });
    
    console.log("Filtered users for search:", filteredUsers.length, filteredUsers.map(id => users[id].name));
    
    if (filteredUsers.length === 0) {
        usersList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üë•</div>
                <p>${filter ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}</p>
                ${!filter ? '<p class="empty-subtitle">–°–æ–∑–¥–∞–π—Ç–µ –µ—â–µ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>' : ''}
            </div>
        `;
        return;
    }
    
    filteredUsers.forEach(userId => {
        const user = users[userId];
        const userItem = document.createElement('div');
        userItem.className = 'user-item';
        userItem.innerHTML = `
            <div class="avatar-container">
                <img class="avatar" src="${user.avatar}" alt="–ê–≤–∞—Ç–∞—Ä">
                <div class="online-indicator ${user.status === 'online' ? '' : 'offline'}"></div>
            </div>
            <div class="user-details">
                <div class="user-name">${user.name}</div>
                <div class="user-status ${user.status}">${user.status === 'online' ? 'online' : '–±—ã–ª(–∞) ' + formatLastSeen(user.lastSeen)}</div>
                <div class="user-email">${user.email}</div>
            </div>
        `;
        userItem.addEventListener('click', () => createChat(userId));
        usersList.appendChild(userItem);
    });
}

// ==================== –§–£–ù–ö–¶–ò–ò –ß–ê–¢–û–í ====================

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadChats() {
    database.ref('userChats/' + currentUser.uid).on('value', (snapshot) => {
        chats = snapshot.val() || {};
        renderChatsList();
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
function renderChatsList() {
    chatsList.innerHTML = '';
    
    if (Object.keys(chats).length === 0) {
        chatsList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üí¨</div>
                <p>–ß–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                <p class="empty-subtitle">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</p>
            </div>
        `;
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sortedChats = Object.keys(chats).sort((a, b) => {
        return (chats[b].lastMessageTime || 0) - (chats[a].lastMessageTime || 0);
    });
    
    sortedChats.forEach(chatId => {
        const chat = chats[chatId];
        
        const chatItem = document.createElement('div');
        chatItem.className = 'chat-item';
        if (currentChat && currentChat.id === chatId) {
            chatItem.classList.add('active');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        let avatar = '';
        let name = '';
        let status = '';
        let lastMessage = chat.lastMessage || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
        
        if (chat.type === 'private') {
            const otherUserId = chat.participants.find(id => id !== currentUser.uid);
            const otherUser = users[otherUserId];
            if (otherUser) {
                avatar = otherUser.avatar;
                name = otherUser.name;
                status = otherUser.status === 'online' ? 'online' : '–±—ã–ª(–∞) ' + formatLastSeen(otherUser.lastSeen);
                
                // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (lastMessage.includes('–∑–≤–æ–Ω–æ–∫')) {
                    const isVoiceCall = lastMessage.includes('–ì–æ–ª–æ—Å–æ–≤–æ–π');
                    lastMessage = `<span class="call-message-preview">${isVoiceCall ? 'üìû' : 'üé•'} ${lastMessage}</span>`;
                }
            }
        }
        
        const lastMessageTime = chat.lastMessageTime ? formatMessageTime(chat.lastMessageTime) : '';
        
        chatItem.innerHTML = `
            <img class="avatar" src="${avatar}" alt="–ê–≤–∞—Ç–∞—Ä —á–∞—Ç–∞">
            <div class="chat-info">
                <div class="chat-name">${name}</div>
                <div class="chat-last-message">${lastMessage}</div>
            </div>
            <div class="chat-time">${lastMessageTime}</div>
        `;
        
        chatItem.addEventListener('click', () => openChat(chatId, chat));
        chatsList.appendChild(chatItem);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
function createChat(otherUserId) {
    if (!users[otherUserId]) {
        showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }

    const chatId = generateChatId(currentUser.uid, otherUserId);
    
    console.log("Creating chat between:", currentUser.uid, "and", otherUserId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–∞—Ç
    database.ref('chats/' + chatId).once('value')
        .then((snapshot) => {
            if (snapshot.exists()) {
                // –ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                const chatData = snapshot.val();
                console.log("Chat already exists:", chatData);
                openChat(chatId, chatData);
                closeNewChatModal.click();
                showNotification('–ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'info');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            const chatData = {
                id: chatId,
                type: 'private',
                participants: [currentUser.uid, otherUserId],
                createdAt: firebase.database.ServerValue.TIMESTAMP
            };
            
            console.log("Creating new chat:", chatData);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return database.ref('chats/' + chatId).set(chatData)
                .then(() => {
                    // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    const userChatData = {
                        type: 'private',
                        participants: [currentUser.uid, otherUserId],
                        lastMessage: '',
                        lastMessageTime: firebase.database.ServerValue.TIMESTAMP
                    };
                    
                    return Promise.all([
                        database.ref('userChats/' + currentUser.uid + '/' + chatId).set(userChatData),
                        database.ref('userChats/' + otherUserId + '/' + chatId).set(userChatData)
                    ]);
                })
                .then(() => {
                    openChat(chatId, chatData);
                    closeNewChatModal.click();
                    showNotification(`–ß–∞—Ç —Å–æ–∑–¥–∞–Ω —Å ${users[otherUserId].name}!`, 'success');
                });
        })
        .catch((error) => {
            console.error("Error creating chat:", error);
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: ' + error.message, 'error');
        });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
function openChat(chatId, chatData) {
    currentChat = {
        id: chatId,
        ...chatData
    };
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    setupSignalingListener();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
    chatActions.style.display = 'flex';
    messageInputContainer.style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
    if (chatData.type === 'private') {
        const otherUserId = chatData.participants.find(id => id !== currentUser.uid);
        const otherUser = users[otherUserId];
        if (otherUser) {
            document.getElementById('chat-title').textContent = otherUser.name;
            document.getElementById('chat-avatar').src = otherUser.avatar;
            document.getElementById('chat-status').textContent = otherUser.status === 'online' ? 'online' : '–±—ã–ª(–∞) ' + formatLastSeen(otherUser.lastSeen);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω
            const onlineIndicator = document.getElementById('chat-online-indicator');
            if (otherUser.status === 'online') {
                onlineIndicator.style.display = 'block';
            } else {
                onlineIndicator.style.display = 'none';
            }
        }
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    messageInput.disabled = false;
    sendBtn.disabled = true;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    loadMessages(chatId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
    renderChatsList();
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    setTimeout(() => {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }, 100);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
function loadMessages(chatId) {
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    messagesContainer.innerHTML = '';
    
    database.ref('messages/' + chatId).orderByChild('timestamp').limitToLast(100).on('value', (snapshot) => {
        messagesContainer.innerHTML = '';
        const messagesData = snapshot.val() || {};
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const messagesArray = Object.keys(messagesData).map(key => ({
            id: key,
            ...messagesData[key]
        })).sort((a, b) => a.timestamp - b.timestamp);
        
        if (messagesArray.length === 0) {
            messagesContainer.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üí¨</div>
                    <p>–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
                    <p class="empty-subtitle">–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
                </div>
            `;
            return;
        }
        
        messagesArray.forEach(message => {
            renderMessage(message);
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        if (messagesArray.length > 0) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function renderMessage(message) {
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–≤–æ–Ω–∫–∏)
    if (message.type === 'call') {
        renderSystemMessage(message);
        return;
    }
    
    // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageElement = document.createElement('div');
    messageElement.className = `message ${message.senderId === currentUser.uid ? 'sent' : 'received'}`;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    const time = new Date(message.timestamp);
    const timeString = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    
    let avatar = '';
    let senderName = '';
    
    if (message.senderId === currentUser.uid) {
        avatar = userAvatar.src;
        senderName = '–í—ã';
    } else {
        const sender = users[message.senderId];
        if (sender) {
            avatar = sender.avatar;
            senderName = sender.name;
        }
    }
    
    messageElement.innerHTML = `
        ${message.senderId !== currentUser.uid ? `<img class="message-avatar avatar" src="${avatar}" alt="–ê–≤–∞—Ç–∞—Ä">` : ''}
        <div class="message-content">
            ${message.senderId !== currentUser.uid ? `<div class="sender-name">${senderName}</div>` : ''}
            <div class="message-text">${message.text}</div>
            <div class="message-time">${timeString}</div>
        </div>
        ${message.senderId === currentUser.uid ? `<img class="message-avatar avatar" src="${avatar}" alt="–ê–≤–∞—Ç–∞—Ä">` : ''}
    `;
    
    messagesContainer.appendChild(messageElement);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–≤–æ–Ω–∫–∏)
function renderSystemMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.className = 'message system-message';
    
    const time = new Date(message.timestamp);
    const timeString = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    
    let callIcon = 'üìû';
    let callText = '';
    
    if (message.callType === 'voice') {
        callIcon = 'üìû';
        callText = '–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫';
    } else if (message.callType === 'video') {
        callIcon = 'üé•';
        callText = '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
    if (message.duration && message.duration > 0) {
        callText += ` (${formatCallDuration(message.duration)})`;
    } else {
        callText += ' (–Ω–µ –æ—Ç–≤–µ—á–µ–Ω)';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–≤–æ–Ω–æ–∫
    let initiatorText = '';
    if (message.senderId === currentUser.uid) {
        initiatorText = '–í—ã –Ω–∞—á–∞–ª–∏ ';
    } else {
        const sender = users[message.senderId];
        if (sender) {
            initiatorText = `${sender.name} –Ω–∞—á–∞–ª(–∞) `;
        }
    }
    
    messageElement.innerHTML = `
        <div class="system-message-content">
            <div class="system-message-icon">${callIcon}</div>
            <div class="system-message-text">
                <div class="system-message-main">${initiatorText}${callText.toLowerCase()}</div>
                <div class="system-message-time">${timeString}</div>
            </div>
        </div>
    `;
    
    messagesContainer.appendChild(messageElement);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage() {
    const text = messageInput.value.trim();
    if (!text || !currentChat) return;
    
    const messageId = database.ref('messages/' + currentChat.id).push().key;
    const messageData = {
        id: messageId,
        text: text,
        senderId: currentUser.uid,
        timestamp: Date.now()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    database.ref('messages/' + currentChat.id + '/' + messageId).set(messageData)
        .then(() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
            const updateData = {
                lastMessage: text.length > 30 ? text.substring(0, 30) + '...' : text,
                lastMessageTime: Date.now()
            };
            
            return database.ref('userChats/' + currentUser.uid + '/' + currentChat.id).update(updateData);
        })
        .then(() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const updates = {};
            currentChat.participants.forEach(participantId => {
                if (participantId !== currentUser.uid) {
                    updates['userChats/' + participantId + '/' + currentChat.id + '/lastMessage'] = 
                        text.length > 30 ? text.substring(0, 30) + '...' : text;
                    updates['userChats/' + participantId + '/' + currentChat.id + '/lastMessageTime'] = Date.now();
                }
            });
            
            return database.ref().update(updates);
        })
        .then(() => {
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            messageInput.value = '';
            sendBtn.disabled = true;
        })
        .catch((error) => {
            console.error("Error sending message:", error);
            showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
        });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ
function createCallMessage(isVideo, timestamp, duration) {
    if (!currentChat) return;
    
    const messageId = database.ref('messages/' + currentChat.id).push().key;
    const callMessage = {
        id: messageId,
        type: 'call',
        callType: isVideo ? 'video' : 'voice',
        duration: duration,
        timestamp: timestamp,
        senderId: currentUser.uid,
        text: getCallMessageText(isVideo, duration)
    };
    
    database.ref('messages/' + currentChat.id + '/' + messageId).set(callMessage)
        .then(() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
            const lastMessage = getCallMessageText(isVideo, duration, true);
            updateLastChatMessage(lastMessage);
        })
        .catch(error => {
            console.error("Error creating call message:", error);
        });
}

// –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ
function getCallMessageText(isVideo, duration, short = false) {
    const callName = isVideo ? '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫';
    
    if (short) {
        if (duration === 0) {
            return callName;
        }
        return `${callName} (${formatCallDuration(duration)})`;
    }
    
    if (duration === 0) {
        return `${callName} (–Ω–µ –æ—Ç–≤–µ—á–µ–Ω)`;
    }
    
    return `${callName} (${formatCallDuration(duration)})`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
function updateLastChatMessage(message) {
    if (!currentChat) return;
    
    const updates = {};
    currentChat.participants.forEach(participantId => {
        updates['userChats/' + participantId + '/' + currentChat.id + '/lastMessage'] = message;
        updates['userChats/' + participantId + '/' + currentChat.id + '/lastMessageTime'] = Date.now();
    });
    
    database.ref().update(updates)
        .catch(error => {
            console.error("Error updating last chat message:", error);
        });
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞–º–∏ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
showRegisterLink.addEventListener('click', (e) => {
    e.preventDefault();
    loginForm.classList.remove('active');
    registerForm.classList.add('active');
});

showLoginLink.addEventListener('click', (e) => {
    e.preventDefault();
    registerForm.classList.remove('active');
    loginForm.classList.add('active');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞
loginBtn.addEventListener('click', () => {
    const email = loginEmail.value.trim();
    const password = loginPassword.value;
    
    if (!email || !password) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    setButtonLoading(loginBtn, true);
    
    auth.signInWithEmailAndPassword(email, password)
        .then((userCredential) => {
            currentUser = userCredential.user;
            showNotification('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            loadUserData();
        })
        .catch((error) => {
            let errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
            switch (error.code) {
                case 'auth/user-not-found':
                    errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω';
                    break;
                case 'auth/wrong-password':
                    errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
                    break;
                case 'auth/invalid-email':
                    errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
                    break;
                default:
                    errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message;
            }
            showNotification(errorMessage, 'error');
        })
        .finally(() => {
            setButtonLoading(loginBtn, false);
        });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registerBtn.addEventListener('click', () => {
    const name = registerName.value.trim();
    const email = registerEmail.value.trim();
    const password = registerPassword.value;
    
    if (!name || !email || !password) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    if (password.length < 6) {
        showNotification('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }
    
    if (name.length < 2) {
        showNotification('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }
    
    setButtonLoading(registerBtn, true);
    
    auth.createUserWithEmailAndPassword(email, password)
        .then((userCredential) => {
            currentUser = userCredential.user;
            
            // –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            const avatarColor = generateAvatarColor(currentUser.uid);
            const avatar = createAvatar(name, avatarColor);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return database.ref('users/' + currentUser.uid).set({
                name: name,
                email: email,
                avatar: avatar,
                avatarColor: avatarColor,
                status: 'online',
                lastSeen: firebase.database.ServerValue.TIMESTAMP,
                createdAt: firebase.database.ServerValue.TIMESTAMP
            });
        })
        .then(() => {
            showNotification('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
            loadUserData();
        })
        .catch((error) => {
            let errorMessage = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
            switch (error.code) {
                case 'auth/email-already-in-use':
                    errorMessage = '–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
                    break;
                case 'auth/invalid-email':
                    errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
                    break;
                case 'auth/weak-password':
                    errorMessage = '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π';
                    break;
                default:
                    errorMessage = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message;
            }
            showNotification(errorMessage, 'error');
        })
        .finally(() => {
            setButtonLoading(registerBtn, false);
        });
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
sendBtn.addEventListener('click', sendMessage);
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

messageInput.addEventListener('input', () => {
    sendBtn.disabled = messageInput.value.trim() === '';
});

// –ó–≤–æ–Ω–∫–∏
voiceCallBtn.addEventListener('click', () => startCall(false));
videoCallBtn.addEventListener('click', () => startCall(true));

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–º
endCallBtn.addEventListener('click', endCall);
muteCallBtn.addEventListener('click', toggleMute);

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
newChatBtn.addEventListener('click', () => {
    newChatModal.classList.add('active');
    searchUserInput.value = '';
    refreshUsersList();
    searchUserInput.focus();
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
closeNewChatModal.addEventListener('click', () => {
    newChatModal.classList.remove('active');
});

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
searchUserInput.addEventListener('input', (e) => {
    renderUsersList(e.target.value);
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settingsBtn.addEventListener('click', () => {
    settingsModal.classList.add('active');
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
closeSettingsModal.addEventListener('click', () => {
    settingsModal.classList.remove('active');
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∞
colorOptions.forEach(option => {
    option.addEventListener('click', () => {
        colorOptions.forEach(opt => opt.classList.remove('active'));
        option.classList.add('active');
        
        const color = option.dataset.color;
        const name = settingsName.value || userName.textContent;
        const newAvatar = createAvatar(name, color);
        
        settingsAvatar.src = newAvatar;
    });
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
saveProfileBtn.addEventListener('click', () => {
    const newName = settingsName.value.trim();
    const activeColorOption = document.querySelector('.color-option.active');
    
    if (!activeColorOption) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞', 'error');
        return;
    }
    
    const activeColor = activeColorOption.dataset.color;
    
    if (!newName) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è', 'error');
        return;
    }
    
    if (newName.length < 2) {
        showNotification('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }
    
    setButtonLoading(saveProfileBtn, true);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
    const newAvatar = createAvatar(newName, activeColor);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    database.ref('users/' + currentUser.uid).update({
        name: newName,
        avatar: newAvatar,
        avatarColor: activeColor
    })
    .then(() => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        userName.textContent = newName;
        userAvatar.src = newAvatar;
        settingsModal.classList.remove('active');
        showNotification('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö
        renderChatsList();
        if (currentChat) {
            loadMessages(currentChat.id);
        }
    })
    .catch((error) => {
        console.error("Error updating profile:", error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', 'error');
    })
    .finally(() => {
        setButtonLoading(saveProfileBtn, false);
    });
});

// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
logoutBtn.addEventListener('click', () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        if (peerConnection) {
            endCall();
        }
        
        auth.signOut()
            .then(() => {
                settingsModal.classList.remove('active');
                showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', 'info');
            })
            .catch((error) => {
                console.error("Error signing out:", error);
                showNotification('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', 'error');
            });
    }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
themeOptions.forEach(option => {
    option.addEventListener('change', (e) => {
        document.documentElement.setAttribute('data-theme', e.target.value);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã –≤ localStorage
        localStorage.setItem('theme', e.target.value);
        
        showNotification(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${e.target.value === 'dark' ? '–ª–∞–≤–∞–Ω–¥–æ–≤—É—é' : '—Å–∏–Ω—é—é'}`, 'info');
    });
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
chatInfoBtn.addEventListener('click', showChatInfo);

function showChatInfo() {
    if (!currentChat) return;
    
    chatInfoContent.innerHTML = '';
    
    if (currentChat.type === 'private') {
        const otherUserId = currentChat.participants.find(id => id !== currentUser.uid);
        const otherUser = users[otherUserId];
        
        if (otherUser) {
            chatInfoContent.innerHTML = `
                <div class="chat-info-section">
                    <div class="info-avatar">
                        <img src="${otherUser.avatar}" alt="–ê–≤–∞—Ç–∞—Ä" class="avatar">
                        <div class="online-indicator ${otherUser.status === 'online' ? '' : 'offline'}"></div>
                    </div>
                    <h4>${otherUser.name}</h4>
                    <p class="user-status">${otherUser.status === 'online' ? 'online' : '–±—ã–ª(–∞) ' + formatLastSeen(otherUser.lastSeen)}</p>
                </div>
                <div class="chat-info-section">
                    <h5>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
                    <p>Email: ${otherUser.email}</p>
                </div>
            `;
        }
    }
    
    chatInfoModal.classList.add('active');
}

closeChatInfoModal.addEventListener('click', () => {
    chatInfoModal.classList.remove('active');
});

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
createGroupChatBtn.addEventListener('click', () => {
    showNotification('–§—É–Ω–∫—Ü–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
document.getElementById('refresh-users-btn').addEventListener('click', refreshUsersList);

// ==================== –°–õ–£–®–ê–¢–ï–õ–ò REAL-TIME ====================

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function setupRealtimeListeners() {
    // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth.onAuthStateChanged((user) => {
        if (!user) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª
            if (currentUser) {
                updateUserStatus('offline');
            }
            
            authScreen.classList.add('active');
            mainScreen.classList.remove('active');
            currentUser = null;
        }
    });
    
    // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    database.ref('users').on('value', (snapshot) => {
        const newUsers = snapshot.val() || {};
        users = newUsers;
        console.log("Real-time users update:", Object.keys(users).length);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if (newChatModal.classList.contains('active')) {
            const currentSearch = searchUserInput.value;
            renderUsersList(currentSearch);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ —á–∞—Ç–∞—Ö
        if (currentChat) {
            const otherUserId = currentChat.participants.find(id => id !== currentUser.uid);
            const otherUser = users[otherUserId];
            if (otherUser) {
                document.getElementById('chat-status').textContent = 
                    otherUser.status === 'online' ? 'online' : '–±—ã–ª(–∞) ' + formatLastSeen(otherUser.lastSeen);
                
                const onlineIndicator = document.getElementById('chat-online-indicator');
                if (otherUser.status === 'online') {
                    onlineIndicator.style.display = 'block';
                } else {
                    onlineIndicator.style.display = 'none';
                }
            }
        }
        
        renderChatsList();
    });
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
const savedTheme = localStorage.getItem('theme') || 'dark';
document.documentElement.setAttribute('data-theme', savedTheme);
document.getElementById(`theme-${savedTheme}`).checked = true;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    auth.onAuthStateChanged((user) => {
        if (user) {
            currentUser = user;
            loadUserData();
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            loginEmail.value = 'test@test.com';
            loginPassword.value = '123456';
            registerName.value = '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            registerEmail.value = 'test@test.com';
            registerPassword.value = '123456';
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    window.addEventListener('click', (e) => {
        if (e.target === newChatModal) {
            closeNewChatModal.click();
        }
        if (e.target === settingsModal) {
            closeSettingsModal.click();
        }
        if (e.target === callModal) {
            // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
        }
        if (e.target === chatInfoModal) {
            closeChatInfoModal.click();
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (currentUser) {
        updateUserStatus('offline');
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (peerConnection) {
        endCall();
    }
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('beforeunload', (e) => {
    if (currentUser) {
        e.preventDefault();
        e.returnValue = '';
    }
});
